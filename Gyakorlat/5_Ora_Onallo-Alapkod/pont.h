







#ifndef PONT_H
#define PONT_H

#include <cmath>
#include <iostream>
using namespace std;

class Pont
{
    double x, y;
    static double M;

    void figyelmeztetes(const std::string& uzenet) const;
    void ellenoriz() const;
public:
    Pont(double x, double y);
    Pont();
    Pont(const Pont& masik);
    double getX () const;
    double getY () const;
    void kiir (ostream& os=std::cout) const;
    static double tavolsag (const Pont& p1, const Pont& p2);
    static double getM();
    static void setM(double newM);
};

#endif // PONT_H


// Pont oszt√°ly
// Adott a Pont oszt√°ly k√©t adattaggal: x, y (double), ezek konstruktorban megadand√≥k, getterekkel lek√©rdezhet≈ëk, van tov√°bb√° saj√°t kiir f√ºggv√©nye is, amely tetsz≈ëleges kimeneti folyamra haszn√°lhat√≥.
// 1. Legyen a Pont oszt√°lyban param√©ter n√©lk√ºli konstruktor, ami az orig√≥t (0,0) √°ll√≠tja be.
// 2. *Legyen a Pont oszt√°lyban egy statikus M adattag (double), aminek √©rt√©ke kezdetben 106 , √©s a setM statikus setter f√ºggv√©nnyel legyen be√°ll√≠that√≥, a getM statikus getter f√ºggv√©nnyel lek√©rdezhet≈ë.
// 3. *Az M egy fels≈ë korl√°tot hat√°roz meg a Pont-ok koordin√°t√°inak az abszol√∫t √©rt√©k√©re. Valah√°nyszor olyan Pont objektum konstru√°l√≥dik, aminek van M-n√©l nagyobb abszol√∫t √©rt√©k≈± koordin√°t√°ja (vagyis nem teljes√ºl r√°, hogy ‚àíùëÄ ‚â§ ùë•, ùë¶ ‚â§ ùëÄ), akkor a konstruktor √≠rjon ki egy egysoros figyelmeztet√©st, ami
// ezt k√∂zli, √©s szerepeljen az √ºzenetben a pont k√©t koordin√°t√°ja is valamilyen m√≥don.
// 4. *√çrj m√°sol√≥ konstruktort is a Pont oszt√°lyhoz, ami szint√©n figyeli az M korl√°tj√°t.
// 5. *Az eml√≠tett figyelmeztet√©sek legyenek ki√≠rva egy warnings.log nev≈± f√°jba is. A f√°jl v√©g√©hez illesztve kell √≠rni, teh√°t ne t√∂rl≈ëdj√∂n a f√°jl addigi tartalma (tipp: std::ios::app).

