3.39.1
#include <stdio.h>
#include <stdlib.h> #define DEFAULT_INPUTFILE "input.txt" struct TMatrix { int r,c;
int ** m;
};
void InitMatrix(struct TMatrix * M, int r, int c) { int i,j;
M->r = r;
M->c = c;
M->m = (int**)malloc(sizeof(int*) * r);
for (i = 0;
i < r;
i++) { M->m[i] = (int*)malloc(sizeof(int) * c);
for (j = 0;
j < c;
j++) M->m[i][j] = 0;
} } void FreeMatrix(struct TMatrix * M) { int i;
for (i = 0;
i < M->r;
i++) { free(M->m[i]);
M->m[i] = NULL;
} free(M->m);
M->m = NULL;
M->r = M-> c = 0;
} void PrintMatrix(struct TMatrix * M) { int i, j;
for (i = 0;
i < M->r;
i++) { for (j = 0;
j < M->c;
j++) printf("%3d ", M->m[i][j]);
printf("\n\n\n");
} } void ReadMatrix(FILE * fd, struct TMatrix * M) { } int i, j;
for (i = 0;
i < M->r;
i++) { for (j = 0;
j < M->c;
j++) fscanf(fd, "%d", &M->m[i][j]);
} void AddMulMatrix(struct TMatrix * A, struct TMatrix * B, struct TMatrix * C, int m) { int i, j;
for (i = 0;
i < A->r;
i++) { for (j = 0;
j < A->c;
j++) C->m[i][j] = (A->m[i][j] + B->m[i][j]) * m;
} } void MulMatrixVector(struct TMatrix * M, struct TMatrix * V1, struct TMatrix * V2) { int i, j;
for (i = 0;
i < M->r;
i++) { V2->m[i][0] = 0;
for (j = 0;
j < M->c;
j++) V2->m[i][0] += M->m[i][j] * V1->m[j][0];
} } int main(int argc, char *argv[]) { struct TMatrix A, V1, V2;
int r, c;
FILE * fd = fopen( argc > 1 ? argv[1] : DEFAULT_INPUTFILE, "r");
if (fd == NULL) { perror("Error");
return 0;
} fscanf(fd, "%d %d", &r, &c);
InitMatrix(&A, r, c);
InitMatrix(&V1, c, 1);
InitMatrix(&V2, r, 1);
ReadMatrix(fd, &A);
ReadMatrix(fd, &V1);
fclose(fd);
MulMatrixVector(&A, &V1, &V2);
printf("Matrix : \n\n");
PrintMatrix(&A);
printf("Vector : \n\n");
PrintMatrix(&V1);
printf("************************\n Matrix * Vector = \n\n");
PrintMatrix(&V2);
FreeMatrix(&A);
FreeMatrix(&V1);
FreeMatrix(&V2);
return 0;
} 
3.39.1. Írjon programot, amely megszoroz egy mátrixot egy vektorral! A mátrixot és a vektort fájlból olvassa be és tárolja őket dinamikus adatszerkezetekkel! Írja ki a képernyőre az eredeti mátrixot és vektort, majd a szorzatvektort! A szorzatvektor annyi értéket tartalmaz, amennyi a mátrix sorainak száma. Ha „P” a szorzatvektor, „A” a mátrix, és „V” az eredeti vektor, akkor Pi = Sum(j=1…c, Aij*Vj), ahol Aij a mátrix i-edik sorának j-edik oszlopában van, c a mátrix oszlopainak száma. Az input fájl formátuma: Első sor: num1 num2 num1: a mátrix sorainak száma num2: a mátrix oszlopainak száma, amely egyben az eredeti vektor elemeinek száma is A következő num1 db sor a mátrix sorait tartalmazza, mindegyik sorban num2 db érték található, szóköz karakterrel elválasztva. A mátrix után num2 db szám következik, az eredeti vektor elemei. Példa bemenet: 2 3 4 1 3 7 2 2 6 2 3 Kimenet: Matrix : 4 1 7 2 Vector : 6 3 2 2 3 ************************ Matrix * Vector = 3.40. Sztring tokenizáló
