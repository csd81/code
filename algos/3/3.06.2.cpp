// 3.6.2. Oldja meg ugyanezt a feladatot dinamikus t√∂mbre is!
//  Hol lesz elt√©r√©s? 

// ### ‚úÖ 3.6.2. feladat: Dinamikus t√∂mb√∂s v√°ltozat

// A C++11-es verzi√≥ **dinamikus t√∂mb√∂t** haszn√°l a statikus `int tomb[4]` helyett. A f≈ë elt√©r√©sek:

// | R√©sz                          | Statikus v√°ltozat             | Dinamikus v√°ltozat (`new`)        |
// | ----------------------------- | ----------------------------- | --------------------------------- |
// | T√∂mb deklar√°l√°sa              | `int tomb[size];`             | `int* tomb = new int[size];`      |
// | T√∂mbre mutat√≥ √©rt√©k (pointer) | `tomb`                        | `tomb`                            |
// | C√≠m lek√©r√©se                  | `&tomb` (t√∂mb eg√©sz√©nek c√≠me) | `&tomb` (a pointer v√°ltoz√≥ c√≠me!) |
// | Felszabad√≠t√°s sz√ºks√©ges?      | ‚ùå (automatikusan)             | ‚úÖ `delete[] tomb;`                |

// ---

// ### üßæ **C++11 megold√°s (dinamikus t√∂mbbel)**:


#include <iostream>
#include <iomanip>

int main() {
    const int size = 4;
    int* tomb = new int[size]; // dinamikus t√∂mb

    // 1. √ârt√©kek bek√©r√©se
    for (int i = 0; i < size; ++i) {
        std::cout << "The " << i << ". value: ";
        std::cin >> tomb[i];
    }

    // 2. Fels≈ë csillagsor (keret)
    std::cout << std::setw(20) << " ";
    for (int i = 0; i < size; ++i) {
        std::cout << std::string(12, '*');
    }
    std::cout << "\n";

    // 3. √ârt√©kek sor keretben
    std::cout << std::setw(20) << " ";
    for (int i = 0; i < size; ++i) {
        std::cout << "*" << std::setw(10) << tomb[i] << "*";
    }
    std::cout << "\n";

    // 4. Als√≥ csillagsor
    std::cout << std::setw(20) << " ";
    for (int i = 0; i < size; ++i) {
        std::cout << std::string(12, '*');
    }
    std::cout << "\n";

    // 5. Indexek
    std::cout << std::setw(20) << "index: ";
    for (int i = 0; i < size; ++i) {
        std::cout << std::left << std::setw(13) << i;
    }
    std::cout << "\n";

    // 6. C√≠mek
    std::cout << std::setw(20) << "address: ";
    for (int i = 0; i < size; ++i) {
        std::cout << std::left << std::setw(13) << static_cast<const void*>(&tomb[i]);
    }
    std::cout << "\n";

    // 7. Mutat√≥k√©nt √©s mutat√≥ v√°ltoz√≥k√©nt
    std::cout << std::setw(20) << "tomb: " << static_cast<const void*>(tomb) << "\n";
    std::cout << std::setw(20) << "&tomb: " << static_cast<const void*>(&tomb) << "\n";

    // 8. M√©ret
    std::cout << std::setw(20) << "tomb size: " << size << "\n";

    delete[] tomb; // ne felejtsd el!
    return 0;
}




// ### üß† Megjegyz√©s a k√ºl√∂nbs√©gekr≈ël

// * `tomb` **statikus esetben** a teljes t√∂mbre mutat, `&tomb` a t√∂mbre mint objektumra (t√≠pus: `int(*)[4]`).
// * `tomb` **dinamikus esetben** csak egy `int*` mutat√≥ az els≈ë elemre, `&tomb` az a pointer v√°ltoz√≥ c√≠me (t√≠pus: `int**` ha √©rtelmezz√ºk).
// * A c√≠mek k√∂z√∂tti k√ºl√∂nbs√©get n√©zd meg p√©ld√°ul a `static_cast<const void*>(...)` ki√≠r√°sban.

 